'on':
  push:
    tags:
    - '*'
jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for release notes generation
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
        cache: gradle
    - uses: gradle/actions/setup-gradle@v3
    - name: Install PKL CLI
      uses: pkl-community/setup-pkl@v0
      with:
        pkl-version: 0.28.2
    
    - name: Verify PKL installation and install pkl-gen-go
      run: |
        pkl --version
        which pkl
        
        # Check if pkl-gen-go is available
        if command -v pkl-gen-go &> /dev/null; then
          echo "pkl-gen-go is available"
          pkl-gen-go --help
        else
          echo "pkl-gen-go not found, installing via Go..."
          
          # Install pkl-gen-go via Go (more reliable than downloading)
          echo "Installing pkl-gen-go using Go..."
          go install github.com/apple/pkl-go/cmd/pkl-gen-go@latest
          
          # Add Go bin to PATH if needed
          export PATH=$PATH:$(go env GOPATH)/bin
          
          # Verify installation
          if command -v pkl-gen-go &> /dev/null; then
            echo "pkl-gen-go installed successfully via Go"
            pkl-gen-go --help
          else
            echo "pkl-gen-go still not found after Go install, checking GOPATH..."
            echo "GOPATH: $(go env GOPATH)"
            echo "Contents of Go bin directory:"
            ls -la $(go env GOPATH)/bin/ || echo "Go bin directory not found"
            
            # Try direct path
            if [ -f "$(go env GOPATH)/bin/pkl-gen-go" ]; then
              echo "Found pkl-gen-go in GOPATH, creating symlink..."
              sudo ln -sf $(go env GOPATH)/bin/pkl-gen-go /usr/local/bin/pkl-gen-go
              pkl-gen-go --help
            else
              echo "pkl-gen-go installation failed"
              exit 1
            fi
          fi
        fi
        
        # Verify both tools are working
        pkl --version
        pkl-gen-go --help
    - name: Update release notes
      env:
        VERSION: ${{ github.ref_name }}
      run: |
        echo "Generating release notes for version $VERSION..."
        chmod +x scripts/generate_release_notes.sh
        ./scripts/generate_release_notes.sh > README.md
        echo "Release notes updated successfully!"
    - name: Commit updated README
      env:
        VERSION: ${{ github.ref_name }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if git diff --quiet README.md; then
          echo "No changes to README.md"
        else
          git add README.md
          git commit -m "Update release notes for $VERSION [skip ci]"
          git push origin HEAD:main
          echo "README.md updated and pushed"
        fi
    - name: build
      env:
        VERSION: ${{ github.ref_name }}
      run: ./gradlew makePackages
    - name: release
      uses: softprops/action-gh-release@v1
      with:
        files: build/generated/pkl/packages/*
    - name: create docs
      env:
        VERSION_NUM: ${{ github.ref_name }}
      run: |
        # Retry mechanism
        set +e
        # Extract version number without the leading 'v'
        export VERSION=$(echo "${VERSION_NUM}" | sed -E 's/^v(.*)$/\1/')
        ./gradlew pkldoc
        EXIT_CODE=$?
        if [ $EXIT_CODE -ne 0 ]; then
          echo "First attempt failed, retrying..."
          sleep 30s
          ./gradlew pkldoc
        fi
        set -e
    - name: setup pages
      uses: actions/configure-pages@v4
    - name: upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: build/pkldoc/pkldoc
    permissions:
      contents: write
  deploy-pages:
    runs-on: ubuntu-latest
    steps:
    - id: deployment
      name: deploy pages
      uses: actions/deploy-pages@v4
    needs: build-and-upload
    permissions:
      pages: write
      id-token: write
    environment:
      name: pkl-docs
      url: ${{ steps.deployment.outputs.page_url }}
