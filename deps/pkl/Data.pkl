/// Abstractions for Data folder
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/data" }

open module org.kdeps.pkl.Data

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "pkl:test"
import "Agent.pkl" as agent

/// Retrieves a data value for the given resource ID and key
///
/// [actionID]: The actionID of the resource to retrieve data for
/// [key]: The key to retrieve
/// [String]: The data value
function get(actionID: String?, key: String?): String =
    if (actionID != null && key != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (value = test.catchOrNull(() -> read("pklres://?op=get&collection=" + resolvedID + "&key=" + key)?.text))
        if (value != null && value != "")
            let (isBase64Result = test.catchOrNull(() -> isBase64(value)))
            if (isBase64Result == true)
                value
            else value
        else ""
    else ""

/// Retrieves all data for the given resource ID as a mapping
///
/// [actionID]: The actionID of the resource to retrieve data for
/// [Mapping<String, String>]: The data mapping
function getAll(actionID: String?): Mapping<String, String> =
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (keys = test.catchOrNull(() -> read("pklres://?op=list&collection=" + resolvedID)?.text))
        if (keys != null && keys != "")
            let (parsedKeys = keys.parseJsonOrNull())
            let (keyList = if (parsedKeys != null) parsedKeys as Listing<String> else new Listing<String> {})
            new Mapping<String, String> {
                for (key in keyList) {
                    [key] = get(actionID, key)
                }
            }
        else new Mapping<String, String> {}
    else new Mapping<String, String> {}

/// Sets a data value for the given resource ID and key
///
/// [actionID]: The actionID of the resource to set data for
/// [key]: The key to set
/// [value]: The value to set
/// [String]: The set value
function set(actionID: String?, key: String?, value: String?): String =
    if (actionID != null && key != null && value != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (result = test.catchOrNull(() -> read("pklres://?op=set&collection=" + resolvedID + "&key=" + key + "&value=" + value)?.text))
        if (result != null) result else ""
    else ""

/// Retrieves a file path for the given resource ID and key
///
/// [actionID]: The actionID of the resource to retrieve file for
/// [key]: The key to retrieve
/// [String]: The file path
function file(actionID: String?, key: String?): String =
    if (actionID != null && key != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (value = test.catchOrNull(() -> read("pklres://?op=get&collection=" + resolvedID + "&key=" + key)?.text))
        if (value != null && value != "")
            let (isBase64Result = test.catchOrNull(() -> isBase64(value)))
            if (isBase64Result == true)
                value
            else value
        else ""
    else ""

/// Retrieves all file paths for the given resource ID as a mapping
///
/// [actionID]: The actionID of the resource to retrieve files for
/// [Mapping<String, String>]: The file mapping
function files(actionID: String?): Mapping<String, String> =
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (keys = test.catchOrNull(() -> read("pklres://?op=list&collection=" + resolvedID)?.text))
        if (keys != null && keys != "")
            let (parsedKeys = keys.parseJsonOrNull())
            let (keyList = if (parsedKeys != null) parsedKeys as Listing<String> else new Listing<String> {})
            new Mapping<String, String> {
                for (key in keyList) {
                    [key] = file(actionID, key)
                }
            }
        else new Mapping<String, String> {}
    else new Mapping<String, String> {}

/// Sets a file path for the given resource ID and key
///
/// [actionID]: The actionID of the resource to set file for
/// [key]: The key to set
/// [value]: The file path to set
/// [String]: The set file path
function setFile(actionID: String?, key: String?, value: String?): String =
    if (actionID != null && key != null && value != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (result = test.catchOrNull(() -> read("pklres://?op=set&collection=" + resolvedID + "&key=" + key + "&value=" + value)?.text))
        if (result != null) result else ""
    else ""
