/// Abstractions for Kdeps Resources
///
/// This module defines the structure for resources used within the Kdeps framework,
/// including actions that can be performed on these resources, validation checks,
/// and error handling mechanisms. Each resource can define its actionID, name, description,
/// category, dependencies, and how it runs.
@ModuleInfo { minPklVersion = "0.28.1" }

@go.Package { name = "github.com/kdeps/schema/gen/resource" }

module org.kdeps.pkl.Resource

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.9.0#/go.pkl"

import "pkl:json"
import "pkl:test"
import "pkl:math"
import "pkl:platform"
import "pkl:semver"
import "pkl:shell"
import "pkl:xml"
import "pkl:yaml"
import "Document.pkl" as document
import "Utils.pkl" as utils
import "Memory.pkl" as memory
import "Session.pkl" as session

import "Project.pkl"
import "APIServer.pkl"
import "APIServerResponse.pkl"
import "LLM.pkl"
import "Exec.pkl"
import "Python.pkl"
import "HTTP.pkl"

/// Regex pattern for validating resource actionIDs and dependencies.
hidden actionStringRegex = Regex(#"^(\w+|@\w+(/[\w-]+)(:[\w.]+)?)$"#)

/// Validates the resource actionID according to the specified regex pattern.
///
/// Throws an error if the resource actionID contains invalid characters.
///
/// [str]: The resource actionID to validate.
hidden isValidActionID = (str) -> if (str.matches(actionStringRegex)) true else throw("Error: Invalid id name: The id contains invalid characters. Please ensure it only includes alphanumeric characters (letters and numbers) and is not empty.")

/// Validates the dependency actionID according to the specified regex pattern.
///
/// Throws an error if the dependency actionID contains invalid characters.
///
/// [str]: The dependency actionID to validate.
hidden isValidDependency = (str) -> if (str.matches(actionStringRegex)) true else throw("Action must be either a simple alphanumeric string or start with `@`, followed by `/action` and an optional `:version` (e.g., `@agent/action:1.0.0`).")

/// The unique identifier for the resource, validated against [isValidActionID].
actionID: String(isValidActionID)

/// The name of the resource.
name: String

/// A description of the resource, providing additional context.
description: String

/// The category to which the resource belongs.
category: String

/// A listing of dependencies required by the resource, validated against [isValidDependency].
requires: Listing<String(isValidDependency)>?

/// Defines the action to be taken for the resource.
run: ResourceAction

/// Class representing an action that can be executed on a resource.
class ResourceAction {
        /// Block for performing PKL expressions.
        expr: Dynamic?

        /// Configuration for executing commands.
        exec: Exec.ResourceExec?

        /// Configuration for python scripts.
        python: Python.ResourcePython?

        /// Configuration for chat interactions with an LLM.
        chat: LLM.ResourceChat?

        /// A listing of conditions that determine if the action should be skipped.
        skipCondition: Listing<Any>?

        /// A pre-flight validation check to be performed before executing the action.
        preflightCheck: ValidationCheck?

        /// A listing of allowed HTTP headers
        allowedHeaders: Listing<String>?

        /// A listing of allowed HTTP params
        allowedParams: Listing<String>?

        /// A listing of targeted HTTP methods
        restrictToHTTPMethods: Listing<String>?

        /// A listing of targeted HTTP routes
        restrictToRoutes: Listing<String>?

        /// Configuration for HTTP client interactions.
        HTTPClient: HTTP.ResourceHTTPClient?

        /// Configuration for handling API responses.
        APIResponse: APIServerResponse?
}

/// Class representing validation checks that can be performed on actions.
class ValidationCheck {
        /// A listing of validation conditions.
        validations: Listing<Any>?

        /// An error associated with the validation check, if any.
        error: APIError?
}

/// Class representing an error returned from an API validation check.
class APIError {
        /// The error code associated with the API error.
        code: Int

        /// A message providing details about the error.
        message: String
}
