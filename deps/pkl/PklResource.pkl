/// Abstractions for PKL records
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/pkl_resource" }

open module org.kdeps.pkl.PklResource

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri@1.0.3#/URI.pkl"
import "pkl:json"

/// Retrieves a record by its [id] and [type] as a PKL object
/// Returns the record as a PKL object, or null if not found.
function getPklRecord(id: String?, typ: String?): Resource? = 
  if (id != null && typ != null) 
    read("pklres:/\(id)?type=\(typ)&op=get")
  else null

/// Sets or updates a record with a new [value]
/// Returns the set value as confirmation.
function setPklValue(id: String?, typ: String?, key: String?, value: String?): String = 
  if (id != null && typ != null && key != null && value != null) 
    read("pklres:/\(id)?type=\(typ)&key=\(key)&op=set&value=\(URI.encodeComponent(value))")?.text ?? "" 
  else ""

/// Get a pkl key record as a PKL object
/// Returns the key value as a PKL object, or null if not found
function getPklValue(id: String?, typ: String?, key: String?): Resource? = 
  if (id != null && typ != null && key != null) 
    read("pklres:/\(id)?type=\(typ)&key=\(key)&op=get")
  else null

/// Lists all record IDs of a specific type as a PKL collection
/// Returns a PKL collection (Listing) of record IDs for the given type
function getAllRecords(typ: String?): Listing<String> = 
  if (typ != null) 
    let (result = read("pklres:/?type=\(typ)&op=list"))
    if (result != null)
      let (jsonText = result.text)
      if (!jsonText.isEmpty && jsonText != "[]")
        let (parseResult = (new json.Parser {}).parse(jsonText))
        if (parseResult is Listing)
          parseResult as Listing<String>
        else
          new Listing<String> {}
      else
        new Listing<String> {}
    else
      new Listing<String> {}
  else new Listing<String> {}

