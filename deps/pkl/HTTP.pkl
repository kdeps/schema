/// This module defines the settings and configurations for HTTP client
/// resources within the KDEPS framework. It enables the management of
/// HTTP requests, including method specifications, request data, headers,
/// and handling of responses. This module provides functionalities to
/// retrieve and manage HTTP client resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/http" }

open module org.kdeps.pkl.HTTP

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "Agent.pkl" as agent
import "PklResource.pkl" as pklres

/// A mapping of resource actionIDs to their associated [ResourceHTTPClient] objects.
/// This mapping is populated from pklres storage.
Resources: Mapping<String, ResourceHTTPClient> = new Mapping {}

/// Class representing an HTTP client resource, which includes details
/// about the HTTP method, URL, request data, headers, and response.
class ResourceHTTPClient {
        /// Regular expression for validating HTTP methods.
        hidden apiMethodRegex = Regex(#"^(?i:(GET|POST|PUT|PATCH|DELETE|HEAD))"#)

        /// Function to check if a given HTTP method is valid.
        hidden isValidHTTPMethod = (str) -> if (str.matches(apiMethodRegex)) true else throw("Error: Invalid HTTP method. The provided HTTP method is not supported. Please use one of the following methods: GET, POST, PUT, PATCH, DELETE, or HEAD.")

        /// The HTTP method to be used for the request.
        Method: String(isValidHTTPMethod)

        /// The URL to which the request will be sent.
        Url: Uri

        /// Optional data to be sent with the request.
        Data: Listing<String>?

        /// A mapping of headers to be included in the request.
        Headers: Mapping<String, String>?

        /// A mapping of parameters to be included in the request.
        Params: Mapping<String, String>?

        /// The response received from the HTTP request.
        Response: ResponseBlock?

        /// The file path where the response body value of this resource is saved
        File: String?

        /// The listing of the item iteration results
        ItemValues: Listing<String>?

        /// A timestamp of when the request was made, represented as an unsigned 64-bit integer.
        Timestamp: Duration?

        /// The timeout duration (in seconds) for the HTTP request. Defaults to 60 seconds.
        TimeoutDuration: Duration? = 60.s
}

/// Class representing the response block of an HTTP request.
/// It contains the body and headers of the response.
class ResponseBlock {
        /// The body of the response.
        Body: String?

        /// A mapping of response headers.
        Headers: Mapping<String, String>?
}

/// Retrieves the [ResourceHTTPClient] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceHTTPClient] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceHTTPClient]: The [ResourceHTTPClient] object associated with the resource actionID.
function resource(actionID: String?): ResourceHTTPClient =
  if (actionID != null && Resources.getOrNull(agent.resolveActionID(actionID)) != null)
    Resources[agent.resolveActionID(actionID)]
  else
    let (pklText = pklres.getPklRecord(agent.resolveActionID(actionID), "http"))
    if (!pklText.isEmpty)
      eval(pklText) as ResourceHTTPClient
    else
      new ResourceHTTPClient {
        Method = "GET"
        Url = ""
        Data = null
        Headers = null
        Params = null
        Response = null
        File = null
        ItemValues = null
      }

/// Retrieves the body of the response associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response body for.
/// [str]: The body of the response from the HTTP request.
function responseBody(actionID: String?): String = 
    let (res = resource(actionID).Response)
    if (res != null && res.Body != null)
        if (isBase64(res.Body)) res.Body.base64Decoded else res.Body
    else ""

/// Retrieves the file path containing the response body associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response body for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String = 
    let (res = resource(actionID).File)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the item iteration responses for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
/// [Listing<String>]: A listing of expected item iteration output.
function itemValues(actionID: String?): Listing<String> = 
    let (res = resource(actionID).ItemValues)
    if (res != null)
        res
    else new Listing {}

/// Retrieves the specified response header associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response header for.
/// [headeractionID]: The name of the header to retrieve.
/// [str]: The value of the specified response header, or an empty string if not found.
function responseHeader(actionID: String?, headeractionID: String?): String =
  if (actionID != null && headeractionID != null)
    let (res = resource(agent.resolveActionID(actionID)).Response)
    if (res != null && res.Headers != null && res.Headers.getOrNull(headeractionID) != null)
      let (headerValue = res.Headers[headeractionID])
      if (isBase64(headerValue)) headerValue.base64Decoded else headerValue
    else ""
  else ""

/// Maps a [ResourceHTTPClient] object to pklres storage for the given [actionID].
///
/// [actionID]: The actionID of the resource to store.
/// [resourceHTTPClient]: The ResourceHTTPClient object to store.
function mapResource(actionID: String?, resourceHTTPClient: ResourceHTTPClient?): String =
  if (actionID != null && resourceHTTPClient != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "resource", resourceHTTPClient.toString())
  else ""

/// Maps individual ResourceHTTPClient properties to pklres storage.
function mapMethod(actionID: String?, method: String?): String =
  if (actionID != null && method != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "method", method)
  else ""

function mapUrl(actionID: String?, url: Uri?): String =
  if (actionID != null && url != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "url", url.toString())
  else ""

function mapData(actionID: String?, data: Listing<String>?): String =
  if (actionID != null && data != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "data", data.toString())
  else ""

function mapHeaders(actionID: String?, headers: Mapping<String, String>?): String =
  if (actionID != null && headers != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "headers", headers.toString())
  else ""

function mapParams(actionID: String?, params: Mapping<String, String>?): String =
  if (actionID != null && params != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "params", params.toString())
  else ""

function mapResponse(actionID: String?, response: ResponseBlock?): String =
  if (actionID != null && response != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "response", response.toString())
  else ""

function mapFile(actionID: String?, file: String?): String =
  if (actionID != null && file != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "file", file)
  else ""

function mapItemValues(actionID: String?, itemValues: Listing<String>?): String =
  if (actionID != null && itemValues != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "itemValues", itemValues.toString())
  else ""

function mapResponseBody(actionID: String?, responseBody: String?): String =
  if (actionID != null && responseBody != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "responseBody", responseBody)
  else ""

function mapResponseHeaders(actionID: String?, responseHeaders: Mapping<String, String>?): String =
  if (actionID != null && responseHeaders != null)
    pklres.setPklValue(agent.resolveActionID(actionID), "http", "responseHeaders", responseHeaders.toString())
  else ""
