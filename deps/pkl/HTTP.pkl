/// This module defines the settings and configurations for HTTP client
/// resources within the KDEPS framework. It enables the management of
/// HTTP requests, including method specifications, request data, headers,
/// and handling of responses. This module provides functionalities to
/// retrieve and manage HTTP client resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/http" }

open module org.kdeps.pkl.HTTP

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "pkl:test"
import "Agent.pkl" as agent
import "Core.pkl" as core

/// Helper function to safely get a value from pklres and return empty string if not available
function safeGetValue(collection: String?, key: String?): String =
  if (collection != null && key != null)
    let (result = core.safeRead("pklres://?op=get&collection=" + collection + "&key=" + key))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        // For simple strings, return as-is. For nested data, it should already be JSON encoded by Go side
        jsonText
      else
        ""
    else
      ""
  else ""

/// Class representing an HTTP client resource, which includes details
/// about the HTTP method, URL, request data, headers, and response.
class ResourceHTTPClient {
        /// Regular expression for validating HTTP methods.
        hidden apiMethodRegex = Regex(#"^(?i:(GET|POST|PUT|PATCH|DELETE|HEAD))"#)

        /// Function to check if a given HTTP method is valid.
        hidden isValidHTTPMethod = (str) -> if (str.matches(apiMethodRegex)) true else throw("Error: Invalid HTTP method. The provided HTTP method is not supported. Please use one of the following methods: GET, POST, PUT, PATCH, DELETE, or HEAD.")

        /// The HTTP method to be used for the request.
        Method: String(isValidHTTPMethod)

        /// The URL to which the request will be sent.
        Url: Uri

        /// Optional data to be sent with the request.
        Data: Listing<String>?

        /// A mapping of headers to be included in the request.
        Headers: Mapping<String, String>?

        /// A mapping of parameters to be included in the request.
        Params: Mapping<String, String>?

        /// The response received from the HTTP request.
        Response: ResponseBlock?

        /// The file path where the response body value of this resource is saved
        File: String?

        /// The listing of the item iteration results
        ItemValues: Listing<String>?

        /// A timestamp of when the request was made, represented as an unsigned 64-bit integer.
        Timestamp: Duration?

        /// The timeout duration (in seconds) for the HTTP request. Defaults to 60 seconds.
        TimeoutDuration: Duration? = 60.s
}

/// Class representing the response block of an HTTP request.
/// It contains the body and headers of the response.
class ResponseBlock {
        /// The body of the response.
        Body: String?

        /// A mapping of response headers.
        Headers: Mapping<String, String>?
}

/// Retrieves the [ResourceHTTPClient] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceHTTPClient] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceHTTPClient]: The [ResourceHTTPClient] object associated with the resource actionID.
function resource(actionID: String?): ResourceHTTPClient =
  if (actionID != null)
    let (resolvedID = agent.resolveActionID(actionID))
    let (method = safeGetValue(resolvedID, "method"))
    let (url = safeGetValue(resolvedID, "url"))
    let (response = safeGetValue(resolvedID, "response"))
    let (file = safeGetValue(resolvedID, "file"))
    let (timeoutDuration = safeGetValue(resolvedID, "timeoutDuration"))
    let (timestamp = safeGetValue(resolvedID, "timestamp"))
    
    new ResourceHTTPClient {
        Method = if (method != "") method else "GET"
        Url = if (url != "") url else ""
        Response = if (response != "") parseResponseFromJson(core.parseJsonOrNull(response)) else null
        File = if (file != "") file else null
        TimeoutDuration = if (timeoutDuration != "") timeoutDuration.toDuration() else 60.s
        Timestamp = if (timestamp != "") timestamp.toDuration() else null
        Data = new Listing<String> {}
        Headers = new Mapping<String, String> {}
        Params = new Mapping<String, String> {}
        ItemValues = new Listing<String> {}
    }
  else
    // Return default ResourceHTTPClient for null actionID
    new ResourceHTTPClient {}

/// Retrieves the body of the response associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response body for.
/// [str]: The body of the response from the HTTP request.
function responseBody(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "response"))
        if (res != "")
            res
        else ""
    else ""

/// Retrieves the file path containing the response body associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response body for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "file"))
        if (res != "")
            res
        else ""
    else ""

/// Retrieves the item iteration responses for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
/// [Listing<String>]: A listing of expected item iteration output.
function itemValues(actionID: String?): Listing<String> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "itemValues"))
        if (res != "")
            let (parsed = core.parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<String> else new Listing<String> {}
        else new Listing<String> {}
    else new Listing<String> {}

/// Retrieves the specified response header associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response header for.
/// [headerName]: The name of the header to retrieve.
/// [str]: The value of the specified response header, or an empty string if not found.
function responseHeader(actionID: String?, headerName: String?): String =
  if (actionID != null && headerName != null)
    let (resolvedID = agent.resolveActionID(actionID))
    let (responseData = safeGetValue(resolvedID, "response"))
    if (responseData != "")
        let (responseMap = core.parseJsonOrNull(responseData))
        if (responseMap != null && responseMap is Mapping<String, Any>)
            let (responseMapping = responseMap as Mapping<String, Any>)
            let (headers = responseMapping.getOrNull("Headers"))
            if (headers != null && headers is Mapping<String, String>)
                let (headersMapping = headers as Mapping<String, String>)
                let (headerValue = headersMapping.getOrNull(headerName))
                if (headerValue != null)
                    headerValue
                else ""
            else ""
        else ""
    else ""
  else ""

/// Retrieves the method associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the method for.
/// [str]: The HTTP method.
function method(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "method"))
        if (res != "") res else "GET"
    else "GET"

/// Retrieves the URL associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the URL for.
/// [str]: The URL.
function url(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "url"))
        if (res != "") res else ""
    else ""

/// Retrieves the timeout duration associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timeout for.
/// [Duration]: The timeout duration.
function timeoutDuration(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "timeoutDuration"))
        if (res != "") res.toDuration() else 60.s
    else 60.s

/// Retrieves the timestamp associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timestamp for.
/// [Duration]: The timestamp.
function timestamp(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "timestamp"))
        if (res != "") res.toDuration() else 0.s
    else 0.s

/// Helper function to parse ResponseBlock from JSON
function parseResponseFromJson(responseData: Any?): ResponseBlock? =
    if (responseData != null && responseData is Mapping)
        let (responseMap = responseData as Mapping<String, Any>)
        new ResponseBlock {
            Body = let (body = responseMap.getOrNull("Body")) if (body is String) body else null
            Headers = let (headers = responseMap.getOrNull("Headers")) if (headers is Mapping<String, String>) headers else null
        }
    else
        null
