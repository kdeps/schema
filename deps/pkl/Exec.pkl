/// Abstractions for executable resources within KDEPS
///
/// This module defines the structure for executable resources that can be used within the Kdeps framework.
/// It handles command execution, environment variable management, and capturing
/// standard output and error, as well as handling environment variables and
/// exit codes. The module provides utilities for retrieving and managing executable
/// resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/exec" }

open module org.kdeps.pkl.Exec

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "pkl:test"
import "Agent.pkl" as agent
import "PklResource.pkl" as pklres

/// A mapping of resource actionIDs to their associated [ResourceExec] objects.
/// This mapping is populated from pklres storage.
Resources: Mapping<String, ResourceExec> = 
    let (recordIds = pklres.getAllRecords("exec"))
    if (recordIds != "" && recordIds != "[]")
        // Parse JSON array of record IDs and populate mapping
        let (ids = test.catchOrNull(() -> (new json.Parser { useMapping = false }).parse(recordIds)))
        if (ids != null && ids is Listing)
            new Mapping {
                for (id in ids as Listing<String>) {
                    [id] = new ResourceExec {
                        Env = null
                        Command = ""
                        Stderr = null
                        Stdout = null
                        ExitCode = 0
                        File = null
                        ItemValues = null
                    }
                }
            }
        else
            new Mapping {}
    else
        new Mapping {}

/// Class representing an executable resource, which includes the command to be executed,
/// environment variables, and execution details such as outputs and exit codes.
class ResourceExec {
    /// Regular expression for validating environment variable names.
    hidden envStringRegex = Regex(#"^[a-zA-Z_]\w*$"#)

    /// Function to check if a given environment variable name is valid.
    hidden isValidEnv = (str) -> if (str.matches(envStringRegex)) true else throw("Error: Invalid env name: The env name contains invalid characters. Please ensure it only includes alphanumeric characters (letters and numbers), does not start with a number, and is not empty.")

    /// A mapping of environment variable names to their values.
    Env: Mapping<String(isValidEnv), String>?

    /// The command to be executed.
    Command: String

    /// The standard error output of the command, if any.
    Stderr: String?

    /// The standard output of the command, if any.
    Stdout: String?

    /// The exit code of the command. Defaults to 0 (success).
    ExitCode: Int? = 0

    /// The file path where the command output value of this resource is saved
    File: String?

    /// The listing of the item iteration results
    ItemValues: Listing<String>?

    /// A timestamp of when the command was executed, represented as an unsigned 64-bit integer.
    Timestamp: Duration?

    /// The timeout duration (in seconds) for the command execution. Defaults to 60 seconds.
    TimeoutDuration: Duration? = 60.s
}

/// Retrieves the [ResourceExec] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceExec] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceExec]: The [ResourceExec] object associated with the resource actionID.
function resource(actionID: String?): ResourceExec =
  if (actionID != null)
    let (resolvedID = agent.resolveActionID(actionID))
    // First try to get from pre-populated Resources mapping
    if (Resources.getOrNull(resolvedID) != null)
      Resources[resolvedID]
    else
      // If not in mapping, fetch from pklres and create resource
      let (pklText = pklres.getPklRecord(resolvedID, "exec"))
      if (!pklText.isEmpty)
        // Parse pklres data and create ResourceExec (simplified for now)
        new ResourceExec {
          Env = null
          Command = ""
          Stderr = null
          Stdout = null
          ExitCode = 0
          File = null
          ItemValues = null
        }
      else
        // Return default ResourceExec for non-existent resources
        new ResourceExec {
          Env = null
          Command = ""
          Stderr = null
          Stdout = null
          ExitCode = 0
          File = null
          ItemValues = null
        }
  else
    // Return default ResourceExec for null actionID
    new ResourceExec {
      Env = null
      Command = ""
      Stderr = null
      Stdout = null
      ExitCode = 0
      File = null
      ItemValues = null
    }

/// Retrieves the standard error output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stderr for.
/// [str]: The standard error output of the command.
function stderr(actionID: String?): String = 
    let (res = resource(actionID).Stderr)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the standard output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stdout for.
/// [str]: The standard output of the command, or the stderr if stdout is empty.
function stdout(actionID: String?): String = 
    if (!stderr(actionID).isEmpty) 
        stderr(actionID) 
    else 
        let (res = resource(actionID).Stdout)
        if (res != null)
            if (isBase64(res)) res.base64Decoded else res
        else ""

/// Retrieves the exit code associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the exit code for.
/// [int]: The exit code of the command.
function exitCode(actionID: String?): Int = 
    let (res = resource(actionID).ExitCode)
    if (res != null)
        res
    else 0

/// Retrieves the file path containing the command output associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the file for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String = 
    let (res = resource(actionID).File)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the item iteration results for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
function itemValues(actionID: String?): Listing<String> = 
    let (res = resource(actionID).ItemValues)
    if (res != null)
        res
    else new Listing {}

/// Retrieves the environment variable [envName] associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the environment variable for.
/// [envName]: The name of the environment variable to retrieve.
/// [str]: The value of the environment variable, or an empty string if not found.
function env(actionID: String?, envName: String?): String =
  if (actionID != null && envName != null)
    let (res = resource(agent.resolveActionID(actionID)).Env)
    if (res != null && res.getOrNull(envName) != null)
      let (envValue = res[envName])
      if (isBase64(envValue)) envValue.base64Decoded else envValue
    else ""
  else ""
