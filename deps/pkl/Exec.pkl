/// Abstractions for executable resources within KDEPS
///
/// This module defines the structure for executable resources that can be used within the Kdeps framework.
/// It handles command execution, environment variable management, and capturing
/// standard output and error, as well as handling environment variables and
/// exit codes. The module provides utilities for retrieving and managing executable
/// resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/exec" }

open module org.kdeps.pkl.Exec

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "pkl:test"
import "Agent.pkl" as agent
import "Core.pkl" as core

/// Helper function to safely get a value from pklres and return empty string if not available
function safeGetValue(collection: String?, key: String?): String =
  if (collection != null && key != null)
    let (result = core.safeRead("pklres://?op=get&collection=" + collection + "&key=" + key))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        // For simple strings, return as-is. For nested data, it should already be JSON encoded by Go side
        jsonText
      else
        ""
    else
      ""
  else ""

/// Class representing an executable resource, which includes the command to be executed,
/// environment variables, and execution details such as outputs and exit codes.
class ResourceExec {
    /// Regular expression for validating environment variable names.
    hidden envStringRegex = Regex(#"^[a-zA-Z_]\w*$"#)

    /// Function to check if a given environment variable name is valid.
    hidden isValidEnv = (str) -> if (str.matches(envStringRegex)) true else throw("Error: Invalid env name: The env name contains invalid characters. Please ensure it only includes alphanumeric characters (letters and numbers), does not start with a number, and is not empty.")

    /// A mapping of environment variable names to their values.
    Env: Mapping<String(isValidEnv), String>?

    /// The command to be executed.
    Command: String

    /// The standard error output of the command, if any.
    Stderr: String?

    /// The standard output of the command, if any.
    Stdout: String?

    /// The exit code of the command. Defaults to 0 (success).
    ExitCode: Int? = 0

    /// The file path where the command output value of this resource is saved
    File: String?

    /// The listing of the item iteration results
    ItemValues: Listing<String>?

    /// A timestamp of when the command was executed, represented as an unsigned 64-bit integer.
    Timestamp: Duration?

    /// The timeout duration (in seconds) for the command execution. Defaults to 60 seconds.
    TimeoutDuration: Duration? = 60.s
}

/// Retrieves the [ResourceExec] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceExec] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceExec]: The [ResourceExec] object associated with the resource actionID.
function resource(actionID: String?): ResourceExec =
  if (actionID != null)
    let (resolvedID = agent.resolveActionID(actionID))
    let (command = safeGetValue(resolvedID, "command"))
    let (stdout = safeGetValue(resolvedID, "stdout"))
    let (stderr = safeGetValue(resolvedID, "stderr"))
    let (exitCode = safeGetValue(resolvedID, "exitCode"))
    let (file = safeGetValue(resolvedID, "file"))
    let (timeoutDuration = safeGetValue(resolvedID, "timeoutDuration"))
    let (timestamp = safeGetValue(resolvedID, "timestamp"))
    
    new ResourceExec {
        Command = if (command != "") command else ""
        Stdout = if (stdout != "") stdout else null
        Stderr = if (stderr != "") stderr else null
        ExitCode = if (exitCode != "") exitCode.toInt() else 0
        File = if (file != "") file else null
        TimeoutDuration = if (timeoutDuration != "") timeoutDuration.toDuration() else 60.s
        Timestamp = if (timestamp != "") timestamp.toDuration() else null
        Env = new Mapping<String, String> {}
        ItemValues = new Listing<String> {}
    }
  else
    // Return default ResourceExec for null actionID
    new ResourceExec {}

/// Retrieves the standard error output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stderr for.
/// [str]: The standard error output of the command.
function stderr(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "stderr"))
        if (res != "")
            res
        else ""
    else ""

/// Retrieves the standard output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stdout for.
/// [str]: The standard output of the command, or the stderr if stdout is empty.
function stdout(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "stdout"))
        if (res != "")
            res
        else ""
    else ""

/// Retrieves the exit code associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the exit code for.
/// [int]: The exit code of the command.
function exitCode(actionID: String?): Int = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "exitCode"))
        if (res != "") res.toInt() else 0
    else 0

/// Retrieves the file path containing the command output associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the file for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "file"))
        if (res != "")
            res
        else ""
    else ""

/// Retrieves the item iteration results for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
function itemValues(actionID: String?): Listing<String> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "itemValues"))
        if (res != "")
            if (core.parseJsonOrNull(res) != null) core.parseJsonOrNull(res) as Listing<String> else new Listing<String> {}
        else new Listing<String> {}
    else new Listing<String> {}

/// Retrieves the environment variable [envName] associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the environment variable for.
/// [envName]: The name of the environment variable to retrieve.
/// [str]: The value of the environment variable, or an empty string if not found.
function env(actionID: String?, envName: String?): String =
  if (actionID != null && envName != null)
    let (resolvedID = agent.resolveActionID(actionID))
    let (envData = safeGetValue(resolvedID, "env"))
    if (envData != "")
        let (envMap = core.parseJsonOrNull(envData))
        if (envMap != null && envMap is Mapping<String, String>)
            let (envMapping = envMap as Mapping<String, String>)
            let (envValue = envMapping.getOrNull(envName))
            if (envValue != null)
                envValue
            else ""
        else ""
    else ""
  else ""

/// Retrieves the command associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the command for.
/// [str]: The command to be executed.
function command(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "command"))
        if (res != "") res else ""
    else ""

/// Retrieves the timeout duration associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timeout for.
/// [Duration]: The timeout duration.
function timeoutDuration(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "timeoutDuration"))
        if (res != "") res.toDuration() else 60.s
    else 60.s

/// Retrieves the timestamp associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timestamp for.
/// [Duration]: The timestamp.
function timestamp(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "timestamp"))
        if (res != "") res.toDuration() else 0.s
    else 0.s
