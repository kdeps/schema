/// Abstractions for KDEPS LLM Resources
///
/// This module defines the structure for managing large language model (LLM) resources
/// related to LLM model interactions. The class allows for managing prompts, responses,
/// and additional configurations such as tools, scenarios, and output files. It also
/// provides utilities for retrieving and managing LLM resources based on their identifiers.
///
/// The module includes:
/// - [ResourceChat]: A class for handling individual chat interactions with LLM models.
/// - [Resource]: Mapping of resource actionIDs to [ResourceChat] objects.
@ModuleInfo { minPklVersion = "0.28.1" }

@go.Package { name = "github.com/kdeps/schema/gen/llm" }

open module org.kdeps.pkl.LLM

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.9.0#/go.pkl"
import "pkl:json"

/// A mapping of resource actionIDs to their associated [ResourceChat] objects.
Resources: Mapping<String, ResourceChat>?

/// Class representing the details of a chat interaction with an LLM model, including prompts, responses,
/// and configuration options such as tools, JSON output, and timeout settings.
class ResourceChat {
    /// The model to use for the conversation (e.g., "llama3.2").
    Model: String = "llama3.2"

    /// The role of the speaker in the conversation (e.g., "user", "assistant").
    Role: String?

    /// The prompt text to be sent to the LLM model.
    Prompt: String?

    /// A listing of multi-prompt scenarios to be executed in sequence.
    Scenario: Listing<MultiChat>?

    /// A listing of tools available for the LLM to use during the conversation.
    Tools: Listing<Tool>?

    /// A listing of file paths that the LLM can reference or access.
    Files: Listing<String>?

    /// A flag indicating whether the response should be in JSON format.
    JSONResponse: Boolean? = false

    /// A listing of specific keys to extract from the JSON response.
    JSONResponseKeys: Listing<String>?

    /// The response text returned by the LLM model.
    Response: String?

    /// The file path where the response is saved.
    File: String?

    /// The listing of the item iteration results
    ItemValues: Listing<String>?

    /// A timestamp of when the response was generated, represented as an unsigned 64-bit integer.
    Timestamp: Duration?

    /// The timeout duration (in seconds) for the LLM request. Defaults to 60 seconds.
    TimeoutDuration: Duration? = 60.s
}

/// Class representing the details of a multi-prompt interaction with an LLM model
class MultiChat {
    /// The role of the speaker in the conversation (e.g., "user", "assistant").
    Role: String?

    /// The prompt text to be sent to the LLM model.
    Prompt: String?
}

/// Class representing the details of a tool interaction with an LLM model
class Tool {
    /// The name of the tool.
    Name: String?

    /// The script content to execute for the tool.
    Script: String?

    /// A description of what the tool does.
    Description: String?

    /// A mapping of parameter names to their properties for tool configuration.
    Parameters: Mapping<String, ToolProperties>?
}

/// Class representing a single parameter's properties in a tool definition
class ToolProperties {
    /// Indicates if the parameter is required for the tool to function.
    Required: Boolean? = true

    /// The data type of the parameter (e.g., "string", "integer").
    Type: String?

    /// A description of the parameter's purpose.
    Description: String?
}

/// Retrieves the [ResourceChat] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceChat] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceChat]: The [ResourceChat] object associated with the resource actionID.
function resource(actionID: String): ResourceChat =
    if (Resources.getOrNull(actionID) != null) Resources[actionID] else new ResourceChat {
        Model = "llama3.2"
        Role {}
        Prompt {}
        Scenario {}
        Tools {}
        Files {}
        JSONResponse = false
        JSONResponseKeys {}
        Response {}
        File {}
        ItemValues {}
    }

/// Retrieves the response text associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response for.
/// [str]: The response text returned by the LLM model.
function response(actionID: String): String = if (isBase64(resource(actionID).Response)) resource(actionID).Response.base64Decoded else resource(actionID).Response

/// Retrieves the prompt text associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the prompt for.
/// [str]: The prompt text sent to the LLM model.
function prompt(actionID: String): String = if (isBase64(resource(actionID).Prompt)) resource(actionID).Prompt.base64Decoded else resource(actionID).Prompt

/// Retrieves whether the LLM's response for the resource [actionID] is in JSON format.
///
/// [actionID]: The actionID of the resource to check for JSON response.
/// [bool]: True if the response is in JSON format, otherwise False.
function jsonResponse(actionID: String): Boolean = if (isBase64(resource(actionID).JSONResponse)) resource(actionID).JSONResponse.base64Decoded else resource(actionID).JSONResponse

/// Retrieves the JSON response keys for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the JSON response keys for.
/// [Listing<String>]: A listing of the JSON response keys.
function jsonResponseKeys(actionID: String): Listing<String> = if (isBase64(resource(actionID).JSONResponseKeys)) resource(actionID).JSONResponseKeys.base64Decoded else resource(actionID).JSONResponseKeys

/// Retrieves the item iteration responses for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
function itemValues(actionID: String): Listing<String> = if (isBase64(resource(actionID).ItemValues)) resource(actionID).ItemValues.base64Decoded else resource(actionID).ItemValues

/// Retrieves the file path containing the LLM response associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String): String = if (isBase64(resource(actionID).File)) resource(actionID).File.base64Decoded else resource(actionID).File
