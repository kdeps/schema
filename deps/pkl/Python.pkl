/// Abstractions for Python script execution within KDEPS
///
/// This module defines the structure for Python execution resources that can be used within the Kdeps framework.
/// It handles Python script execution, environment variable management, capturing outputs,
/// variables as well as exit codes. The module provides utilities for retrieving
/// and managing Python execution resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/python" }

open module org.kdeps.pkl.Python

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "pkl:test"
import "Agent.pkl" as agent
import "PklResource.pkl" as pklres

/// A mapping of resource actionIDs to their associated [ResourcePython] objects.
/// This mapping is populated from pklres storage.
Resources: Mapping<String, ResourcePython> = 
    let (recordIds = pklres.getAllRecords("python"))
    if (recordIds.length > 0)
        new Mapping {
            for (id in recordIds) {
                [id] = 
                    let (recordObject = pklres.getPklRecord(id, "python"))
                    if (recordObject != null && !recordObject.text.isEmpty)
                        parseResourcePythonFromPkl(recordObject.text, id)
                    else
                        new ResourcePython {}
            }
        }
    else
        new Mapping<String, ResourcePython> {}

/// Class representing a Python execution resource, which includes the script to be executed,
/// environment variables, and execution details such as outputs and exit codes.
class ResourcePython {
    /// Regular expression for validating environment variable names.
    hidden envStringRegex = Regex(#"^[a-zA-Z_]\w*$"#)

    /// Function to validate environment variable names.
    ///
    /// Throws an error if the name contains invalid characters, starts with a number,
    /// or is empty.
    hidden isValidEnv = (str) -> if (str.matches(envStringRegex)) true else throw("Error: Invalid environment variable name. Ensure it includes only alphanumeric characters or underscores, starts with a letter or underscore, and is not empty.")

    /// A mapping of environment variable names to their values.
    Env: Mapping<String(isValidEnv), String>?

    /// Specifies the python environment in which this Python script will execute. Uvu will be used by default, Anaconda if it is
    /// installed.
    PythonEnvironment: String?

    /// The Python script to be executed.
    Script: String

    /// The standard error output of the script, if any.
    Stderr: String?

    /// The standard output of the script, if any.
    Stdout: String?

    /// The exit code of the script. Defaults to 0 (success).
    ExitCode: Int? = 0

    /// The file path where the script output value of this resource is saved
    File: String?

    /// The listing of the item iteration results
    ItemValues: Listing<String>?

    /// A timestamp indicating when the command was executed, as an unsigned 64-bit integer.
    Timestamp: Duration?

    /// The timeout duration (in seconds) for the script execution. Defaults to 60 seconds.
    TimeoutDuration: Duration? = 60.s
}

/// Retrieves the [ResourcePython] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourcePython] object with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourcePython]: The [ResourcePython] object associated with the resource actionID.
function resource(actionID: String?): ResourcePython =
  if (actionID != null)
    let (resolvedID = agent.resolveActionID(actionID))
    // First try to get from pre-populated Resources mapping
    if (Resources.getOrNull(resolvedID) != null)
      Resources[resolvedID]
    else
      // Fallback: fetch from pklres and create resource
      let (pklText = pklres.getPklRecord(resolvedID, "python"))
      if (pklText != null && !pklText.text.isEmpty)
        parseResourcePythonFromPkl(pklText.text, resolvedID)
      else
        // Return default ResourcePython for non-existent resources
        new ResourcePython {}
  else
    // Return default ResourcePython for null actionID
    new ResourcePython {}

/// Retrieves the standard error output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stderr for.
/// [str]: The standard error output of the Python script.
function stderr(actionID: String?): String = 
    let (res = resource(actionID).Stderr)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the standard output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stdout for.
/// [str]: The standard output of the Python script, or the stderr if stdout is empty.
function stdout(actionID: String?): String = 
    if (!stderr(actionID).isEmpty) 
        stderr(actionID) 
    else 
        let (res = resource(actionID).Stdout)
        if (res != null)
            if (isBase64(res)) res.base64Decoded else res
        else ""

/// Retrieves the exit code associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the exit code for.
/// [int]: The exit code of the Python script.
function exitCode(actionID: String?): Int = 
    let (res = resource(actionID).ExitCode)
    if (res != null)
        res
    else 0

/// Retrieves the file path containing the script output associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the file for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String = 
    let (res = resource(actionID).File)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the item iteration results for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
function itemValues(actionID: String?): Listing<String> = 
    let (res = resource(actionID).ItemValues)
    if (res != null)
        res
    else new Listing<String> {}

/// Retrieves the environment variable [envName] associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the environment variable for.
/// [envName]: The name of the environment variable to retrieve.
/// [str]: The value of the environment variable, or an empty string if not found.
function env(actionID: String?, envName: String?): String =
  if (actionID != null && envName != null)
    let (res = resource(agent.resolveActionID(actionID)).Env)
    if (res != null && res.getOrNull(envName) != null)
      let (envValue = res[envName])
      if (isBase64(envValue)) envValue.base64Decoded else envValue
    else ""
  else ""

/// Parses a PKL record text and extracts the ResourcePython object for the given resource ID
/// 
/// [pklText]: The PKL content containing the Resources mapping or individual object
/// [resourceId]: The ID of the resource to extract
/// Returns a ResourcePython object with the parsed values or default values if parsing fails
function parseResourcePythonFromPkl(pklText: String, resourceId: String): ResourcePython =
    if (pklText.isEmpty)
        new ResourcePython {}
    else
        // Try to evaluate the PKL content as a ResourcePython object
        let (evaluatedPython = evaluatePklContent(pklText))
        if (evaluatedPython != null)
            evaluatedPython
        else
            // Fallback to default ResourcePython if parsing fails
            new ResourcePython {}

/// Evaluates PKL content and returns a ResourcePython object if successful
/// 
/// [pklContent]: The PKL content to evaluate
/// Returns the evaluated ResourcePython object or null if evaluation fails
function evaluatePklContent(pklContent: String): ResourcePython? =
    if (pklContent.isEmpty || pklContent.trim().isEmpty)
        null
    else
        // Try to parse as JSON first (common case)
        let (jsonResult = test.catchOrNull(() -> (new json.Parser {}).parse(pklContent)))
        if (jsonResult != null && jsonResult is Mapping)
            parseResourcePythonFromJson(jsonResult as Mapping<String, Any>)
        else
            // Try to evaluate as PKL object content
            parseResourcePythonFromPklText(pklContent)

/// Parses ResourcePython from JSON mapping
function parseResourcePythonFromJson(jsonData: Mapping<String, Any>): ResourcePython? =
    new ResourcePython {
        Script = jsonData.getOrNull("Script") as String? ?? ""
        PythonEnvironment = jsonData.getOrNull("PythonEnvironment") as String?
        Stderr = jsonData.getOrNull("Stderr") as String?
        Stdout = jsonData.getOrNull("Stdout") as String?
        ExitCode = parseIntFromAny(jsonData.getOrNull("ExitCode"), 0)
        File = jsonData.getOrNull("File") as String?
        ItemValues = jsonData.getOrNull("ItemValues") as Listing<String>?
        Timestamp = jsonData.getOrNull("Timestamp") as Duration?
        TimeoutDuration = jsonData.getOrNull("TimeoutDuration") as Duration?
    }

/// Helper function to parse integer from Any type
function parseIntFromAny(value: Any?, defaultValue: Int): Int =
    if (value == null)
        defaultValue
    else if (value is Int)
        value
    else if (value is String)
        parseIntOrDefault(value, defaultValue)
    else
        defaultValue

/// Parses ResourcePython from PKL text content
function parseResourcePythonFromPklText(content: String): ResourcePython? =
    // Handle simple object formats like: { Script = "print('Hello')"; ExitCode = 0 }
    if (content.trim().startsWith("{") && content.trim().endsWith("}"))
        // Extract content between braces
        let (innerContent = content.trim().drop(1).dropLast(1).trim())
        let (properties = parseProperties(innerContent))
        new ResourcePython {
            Script = properties.getOrNull("Script") ?? ""
            PythonEnvironment = properties.getOrNull("PythonEnvironment")
            Stderr = properties.getOrNull("Stderr")
            Stdout = properties.getOrNull("Stdout")
            ExitCode = parseIntOrDefault(properties.getOrNull("ExitCode"), 0)
            File = properties.getOrNull("File")
        }
    else
        null

/// Helper function to parse properties from PKL object content
function parseProperties(content: String): Mapping<String, String> =
    // Parse key-value pairs from semicolon-separated format
    let (cleanContent = content.replaceAll("\n", ";").replaceAll("\r", ""))
    let (pairs = cleanContent.split(";"))
    let (parsedPairs = pairs.map((pair) -> parseKeyValuePair(pair.trim())).filter((entry) -> entry != null && entry.key != null && !entry.key.isEmpty))
    new Mapping<String, String> {
        for (entry in parsedPairs) {
            [entry.key] = entry.value ?? ""
        }
    }

/// Helper to parse a single key-value pair
function parseKeyValuePair(pair: String): ParsedKeyValue? =
    if (pair.isEmpty || !pair.contains("="))
        null
    else
        let (equalIndex = pair.indexOf("="))
        let (key = pair.substring(0, equalIndex).trim().replaceAll("\"", "").replaceAll("'", ""))
        let (value = pair.substring(equalIndex + 1).trim().replaceAll("\"", "").replaceAll("'", ""))
        if (key.isEmpty)
            null
        else
            new ParsedKeyValue { key = key; value = value }

/// Helper class for parsed key-value pairs
class ParsedKeyValue {
    key: String
    value: String
}

/// Helper function to parse integer with default value
function parseIntOrDefault(value: String?, defaultValue: Int): Int =
    if (value == null || value.trim().isEmpty)
        defaultValue
    else
        let (trimmed = value.trim())
        if (trimmed.matches(Regex("^-?\\d+$")))
            trimmed.toInt()
        else
            defaultValue
