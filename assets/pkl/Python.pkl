/// Abstractions for Python script execution within KDEPS
///
/// This module defines the structure for Python execution resources that can be used within the Kdeps framework.
/// It handles Python script execution, environment variable management, capturing outputs,
/// variables as well as exit codes. The module provides utilities for retrieving
/// and managing Python execution resources based on their identifiers.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/python" }

open module org.kdeps.pkl.Python

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "pkl:json"
import "Agent.pkl" as agent
import "PklResource.pkl" as pklres

/// A mapping of resource actionIDs to their associated [ResourcePython] objects.
/// This mapping is populated from pklres storage.
Resources: Mapping<String, ResourcePython> = new Mapping {}

/// Class representing a Python execution resource, which includes the script to be executed,
/// environment variables, and execution details such as outputs and exit codes.
class ResourcePython {
    /// Regular expression for validating environment variable names.
    hidden envStringRegex = Regex(#"^[a-zA-Z_]\w*$"#)

    /// Function to validate environment variable names.
    ///
    /// Throws an error if the name contains invalid characters, starts with a number,
    /// or is empty.
    hidden isValidEnv = (str) -> if (str.matches(envStringRegex)) true else throw("Error: Invalid environment variable name. Ensure it includes only alphanumeric characters or underscores, starts with a letter or underscore, and is not empty.")

    /// A mapping of environment variable names to their values.
    Env: Mapping<String(isValidEnv), String>?

    /// Specifies the python environment in which this Python script will execute. Uvu will be used by default, Anaconda if it is
    /// installed.
    PythonEnvironment: String?

    /// The Python script to be executed.
    Script: String

    /// The standard error output of the script, if any.
    Stderr: String?

    /// The standard output of the script, if any.
    Stdout: String?

    /// The exit code of the script. Defaults to 0 (success).
    ExitCode: Int? = 0

    /// The file path where the script output value of this resource is saved
    File: String?

    /// The listing of the item iteration results
    ItemValues: Listing<String>?

    /// A timestamp indicating when the command was executed, as an unsigned 64-bit integer.
    Timestamp: Duration?

    /// The timeout duration (in seconds) for the script execution. Defaults to 60 seconds.
    TimeoutDuration: Duration? = 60.s
}

/// Retrieves the [ResourcePython] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourcePython] object with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourcePython]: The [ResourcePython] object associated with the resource actionID.
function resource(actionID: String?): ResourcePython =
  if (actionID != null && Resources.getOrNull(agent.resolveActionID(actionID)) != null)
    Resources[agent.resolveActionID(actionID)]
  else
    let (pklText = pklres.getPklRecord(agent.resolveActionID(actionID), "python"))
    if (!pklText.isEmpty)
      // For now, return default ResourcePython since eval() is not available in PKL 0.28.2
      new ResourcePython {
        Env = null
        PythonEnvironment = ""
        Script = ""
        Stderr = null
        Stdout = null
        ExitCode = 0
        File = null
        ItemValues = null
      }
    else
      new ResourcePython {
        Env = null
        PythonEnvironment = ""
        Script = ""
        Stderr = null
        Stdout = null
        ExitCode = 0
        File = null
        ItemValues = null
      }

/// Retrieves the standard error output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stderr for.
/// [str]: The standard error output of the Python script.
function stderr(actionID: String?): String = 
    let (res = resource(actionID).Stderr)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the standard output associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the stdout for.
/// [str]: The standard output of the Python script, or the stderr if stdout is empty.
function stdout(actionID: String?): String = 
    if (!stderr(actionID).isEmpty) 
        stderr(actionID) 
    else 
        let (res = resource(actionID).Stdout)
        if (res != null)
            if (isBase64(res)) res.base64Decoded else res
        else ""

/// Retrieves the exit code associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the exit code for.
/// [int]: The exit code of the Python script.
function exitCode(actionID: String?): Int = 
    let (res = resource(actionID).ExitCode)
    if (res != null)
        res
    else 0

/// Retrieves the file path containing the script output associated with the specified resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the file for.
/// Returns the decoded content if the file is Base64-encoded; otherwise, returns the file content as-is.
function file(actionID: String?): String = 
    let (res = resource(actionID).File)
    if (res != null)
        if (isBase64(res)) res.base64Decoded else res
    else ""

/// Retrieves the item iteration results for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values.
function itemValues(actionID: String?): Listing<String> = 
    let (res = resource(actionID).ItemValues)
    if (res != null)
        res
    else new Listing {}

/// Retrieves the environment variable [envName] associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the environment variable for.
/// [envName]: The name of the environment variable to retrieve.
/// [str]: The value of the environment variable, or an empty string if not found.
function env(actionID: String?, envName: String?): String =
  if (actionID != null && envName != null)
    let (res = resource(agent.resolveActionID(actionID)).Env)
    if (res != null && res.getOrNull(envName) != null)
      let (envValue = res[envName])
      if (isBase64(envValue)) envValue.base64Decoded else envValue
    else ""
  else ""
