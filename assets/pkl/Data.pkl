/// Abstractions for Data folder
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/data" }

open module org.kdeps.pkl.Data

extends "Utils.pkl"
import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "PklResource.pkl" as pklres

/// Files in the data folder mapped with the agent name and version
/// This mapping is populated from pklres storage.
Files: Mapping<String, Mapping<String, String>> = new Mapping {}

/// Retrieves data file path of a given [agentName] and [fileName]
///
/// If the file with the specified key does not exist, returns metadata for the first available file,
/// or returns an empty file metadata object if no files are data.
///
/// [agentName]: The key of the agent name.
/// [fileName]: The key of the file to retrieve from the agent.
function filepath(agentName: String?, fileName: String?): String = 
    if (agentName != null && fileName != null && Files.getOrNull(agentName)?.ifNonNull((v) -> v.containsKey(fileName)) == true)
        if (isBase64(Files[agentName][fileName])) Files[agentName][fileName].base64Decoded else Files[agentName][fileName]
    else
        let (pklText = pklres.getPklRecord(agentName, "data"))
        if (!pklText.isEmpty)
            let (dataRecord = eval(pklText) as Mapping<String, String>)
            if (dataRecord.containsKey(fileName))
                if (isBase64(dataRecord[fileName])) dataRecord[fileName].base64Decoded else dataRecord[fileName]
            else ""
        else ""
