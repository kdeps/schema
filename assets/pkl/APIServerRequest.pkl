/// Abstractions for KDEPS API Server Request handling
///
/// This module provides the structure for handling API server requests in the Kdeps system.
/// It includes classes and variables for managing request data such as paths, methods, headers,
/// query parameters, and uploaded files. It also provides functions for retrieving and processing
/// request information, including file uploads and metadata extraction.
///
/// This module is part of the `kdeps` schema and interacts with the API server to process incoming
/// requests.
///
/// The module defines:
/// - [APIServerRequestUploads]: For managing metadata of uploaded files.
/// - [Path]: The URI path of the incoming request.
/// - [Method]: The HTTP method used for the request.
/// - [Data]: The request body data.
/// - [Files]: A mapping of uploaded files and their metadata.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/api_server_request" }

open module org.kdeps.pkl.APIServerRequest

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri@1.0.3#/URI.pkl"

/// Regular expression for validating HTTP methods supported by the API server.
hidden apiMethodRegex = Regex(#"^(?i:(GET|POST|PUT|PATCH|OPTIONS|DELETE|HEAD))"#)

/// Validates if the provided HTTP method [str] is supported.
///
/// This function checks whether the given HTTP method matches the supported methods
/// defined in [apiMethodRegex]. If the method is invalid, it throws an error with
/// a descriptive message listing the supported methods.
///
/// Returns `true` if the method is valid; otherwise, throws an error with a descriptive message.
///
/// [str]: The HTTP method string to validate.
/// [bool]: True if the HTTP method is valid, otherwise throws an error.
hidden isValidHTTPMethod = (str) -> if (str.matches(apiMethodRegex)) true else throw("Error: Invalid HTTP method. The provided HTTP method is not supported. Please use one of the following methods: GET, POST, PUT, PATCH, DELETE, OPTIONS, or HEAD.")

/// The URI path of the incoming request.
Path: Uri

/// The Client IP Address
IP: String

/// The Request ID
ID: String

/// The HTTP method used for the request. Must be a valid method, as determined by [isValidHTTPMethod].
Method: String(isValidHTTPMethod)

/// The request body, if provided.
Data: String?

/// A mapping of query parameters included in the request.
Params: Mapping<String, String>?

/// A mapping of HTTP headers included in the request.
Headers: Mapping<String, String>?

/// Files uploaded with the request, represented as a mapping of file keys to upload metadata.
Files: Mapping<String, APIServerRequestUploads>?

/// Helper variables for file processing
hidden fileKeys = Files?.keys ?? List()
hidden firstFileKey = fileKeys.firstOrNull

/// Class representing metadata for an uploaded file in an API request.
class APIServerRequestUploads {
    /// The file path where the uploaded file is stored on the server.
    Filepath: String

    /// The MIME type of the uploaded file.
    Filetype: String
}

/// Retrieves the decoded request body.
///
/// [str]: The Base64-decoded request body.
function data(): String = if (Data != null && Data != "") Data.base64Decoded else ""

/// Retrieves the decoded value of the query parameter [name].
///
/// If the parameter exists, its value is Base64-decoded and returned.
///
/// [name]: The query parameter to retrieve.
/// [str]: The Base64-decoded value of the query parameter.
function params(name: String): String =
    if (Params != null && Params.getOrNull(name) != null) Params[name].base64Decoded else ""

/// Retrieves the decoded value of the header [name].
///
/// If the header exists, its value is Base64-decoded and returned.
///
/// [name]: The header name to retrieve.
/// [str]: The Base64-decoded value of the header.
function header(name: String): String =
    if (Headers != null && Headers.getOrNull(name) != null) Headers[name].base64Decoded else ""

/// Retrieves metadata for the uploaded file with the key [name].
///
/// If no file with the specified key exists, returns metadata for the first available file,
/// or returns an empty file metadata object if no files are uploaded.
///
/// [name]: The key of the file to retrieve.
/// [APIServerRequestUploads]: The metadata for the requested file.
function file(name: String): APIServerRequestUploads =
    if (Files != null && !Files.isEmpty) 
        if (Files.getOrNull(name) != null) Files[name] 
        else if (firstFileKey != null) Files[firstFileKey] 
        else new APIServerRequestUploads { Filepath = ""; Filetype = "" }
    else new APIServerRequestUploads { Filepath = ""; Filetype = "" }

/// Retrieves the MIME type of the uploaded file with the key [name].
///
/// [name]: The key of the file to retrieve the MIME type for.
/// [str]: The MIME type of the file.
function filetype(name: String): String = file(name).Filetype

/// Retrieves the file path of the uploaded file with the key [name].
///
/// [name]: The key of the file to retrieve the file path for.
/// [str]: The file path of the file.
function filepath(name: String): String = file(name).Filepath

/// Retrieves the total number of uploaded files.
///
/// [str]: The number of uploaded files as a string.
function filecount(): String = if (Files != null) Files.length.toString() else "0"

/// Retrieves a list of file paths for all uploaded files.
///
/// [Listing]: A list of file paths for uploaded files.
function fileList(): Listing = if (Files != null) Files.values.toList().map((it) -> it.Filepath) else List()

/// Retrieves a list of MIME types for all uploaded files.
///
/// [Listing]: A list of MIME types for uploaded files.
function filetypes(): Listing = if (Files != null) Files.values.toList().map((it) -> it.Filetype) else List()

/// Retrieves a list of file paths for uploaded files that match the given MIME type [mimeType].
///
/// [mimeType]: The MIME type to filter files by.
/// [Listing]: A list of file paths for files that match the specified MIME type.
function filesByType(mimeType: String): Listing = if (Files != null) Files.values.toList().filter((it) -> it.Filetype == mimeType).map((it) -> it.Filepath) else List()

/// Retrieves the URI path of the request.
///
/// [str]: The URI path of the request.
function path(): String = Path

/// Retrieves the HTTP method of the request.
///
/// [str]: The HTTP method of the request.
function method(): String = Method

/// Retrieves the Client IP Address of the request.
///
/// [str]: The Client IP of the request.
function ip(): String = IP

/// Retrieves the Request ID of the request.
///
/// [str]: The Request ID of the request.
function id(): String = ID
