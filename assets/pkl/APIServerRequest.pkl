/// Abstractions for Kdeps API Server Requests
///
/// This module provides functionality to handle and validate HTTP requests to the Kdeps API Server, including methods
/// for parsing HTTP methods, request data, parameters, headers, and file uploads.
///
/// Supported features:
/// - Validation of HTTP methods.
/// - Handling request body data, parameters, headers, and file uploads.
/// - Functions to decode Base64 encoded request data.
/// - File management utilities like retrieving file types and paths.
/// - Filtering files by MIME type.
@ModuleInfo { minPklVersion = "0.29.0" }

@go.Package { name = "github.com/kdeps/schema/gen/api_server_request" }

open module org.kdeps.pkl.APIServerRequest

import "external/pkl-go/codegen/src/go.pkl"

/// Regex for allowed HTTP Methods.
///
/// Matches HTTP methods in a case-insensitive manner. Allowed methods are: GET, POST, PUT, PATCH, OPTIONS, DELETE, and HEAD.
hidden apiMethodRegex = Regex(#"^(?i:(GET|POST|PUT|PATCH|OPTIONS|DELETE|HEAD))"#)

/// Validates if the provided HTTP method [str] is supported.
///
/// Returns `true` if the method is valid; otherwise, throws an error with a descriptive message.
///
/// ### Example usage:
///
/// isValidHTTPMethod("POST") // true
/// isValidHTTPMethod("INVALID") // Error: Invalid HTTP method.
///
///
/// [str]: The HTTP method string to validate.
/// [bool]: True if the HTTP method is valid, otherwise throws an error.
hidden isValidHTTPMethod = (str) -> if (str.matches(apiMethodRegex)) true else throw("Error: Invalid HTTP method. The provided HTTP method is not supported. Please use one of the following methods: GET, POST, PUT, PATCH, DELETE, OPTIONS, or HEAD.")

/// Represents the request URI path.
Path: Uri
/// Represents the Client IP.
IP: String
/// Represents the Request ID.
ID: String
/// The HTTP method used for the request. Must be a valid method, as determined by [isValidHTTPMethod].
Method: String(isValidHTTPMethod)
/// The body data of the request, which is optional.
Data: String?
/// Query parameters sent with the request.
Params: Mapping<String, String>?
/// Headers sent with the request.
Headers: Mapping<String, String>?
/// Files uploaded with the request, represented as a mapping of file keys to upload metadata.
Files: Mapping<String, APIServerRequestUploads>?

/// Retrieves the keys of the uploaded files.
hidden fileKeys = Files.keys
/// Retrieves the first key of the uploaded files or null if no files are uploaded.
hidden firstFileKey = fileKeys.firstOrNull

/// Represents metadata for an uploaded file, including its file path and MIME type.
class APIServerRequestUploads {
    /// The file path where the uploaded file is stored.
    Filepath: String
    /// The MIME type of the uploaded file.
    Filetype: String
}

/// Retrieves the Base64-decoded body data of the request.
///
/// Returns an empty string if no body data is provided or if the data is already decoded.
///
/// [str]: The Base64-decoded request body.
function data(): String = if (Data != "") Data.base64Decoded else ""

/// Retrieves the decoded value of the query parameter [name].
///
/// Returns an empty string if the parameter does not exist.
///
/// [name]: The query parameter to retrieve.
/// [str]: The Base64-decoded value of the query parameter.
function params(name: String): String =
        if (Params.getOrNull(name) != null) Params[name].base64Decoded else ""

/// Retrieves the decoded value of the header [name].
///
/// Returns an empty string if the header does not exist.
///
/// [name]: The header name to retrieve.
/// [str]: The Base64-decoded value of the header.
function header(name: String): String =
        if (Headers.getOrNull(name) != null) Headers[name].base64Decoded else ""

/// Retrieves metadata for the uploaded file with the key [name].
///
/// If the file with the specified key does not exist, returns metadata for the first available file,
/// or returns an empty file metadata object if no files are uploaded.
///
/// [name]: The key of the file to retrieve.
/// [APIServerRequestUploads]: The metadata for the requested file.
function file(name: String): APIServerRequestUploads =
        if (!Files.isEmpty) if (Files.getOrNull(name) != null) Files[name] else Files[firstFileKey] else new APIServerRequestUploads {
                Filepath = ""
                Filetype = ""
        }

/// Retrieves the MIME type of the uploaded file with the key [name].
///
/// [name]: The key of the file to retrieve the MIME type for.
/// [str]: The MIME type of the file.
function filetype(name: String): String = file(name).Filetype

/// Retrieves the file path of the uploaded file with the key [name].
///
/// [name]: The key of the file to retrieve the file path for.
/// [str]: The file path of the file.
function filepath(name: String): String = file(name).Filepath

/// Returns the total number of uploaded files.
///
/// [str]: The number of uploaded files as a string.
function filecount(): String = Files.length

/// Retrieves a list of file paths for all uploaded files.
///
/// [Listing]: A list of file paths for uploaded files.
function files(): Listing =
        Files.toMap().flatMap((_, v) ->  Map(v.Filepath, null)).keys.filter((v) -> v != null).toListing()

/// Retrieves a list of MIME types for all uploaded files.
///
/// [Listing]: A list of MIME types for uploaded files.
function filetypes(): Listing =
        Files.toMap().flatMap((_, v) ->  Map(v.Filetype, null)).keys.filter((v) -> v != null).toListing()

/// Retrieves a list of file paths for uploaded files that match the given MIME type [mimeType].
///
/// [mimeType]: The MIME type to filter files by.
/// [Listing]: A list of file paths for files that match the specified MIME type.
function filesByType(mimeType: String): Listing =
        Files.toMap().flatMap((_, v) ->  if (v.Filetype == mimeType) Map(v.Filepath, null) else Map(null, null)).keys.filter((v) -> v != null).toListing()

/// Retrieves the URI path of the request.
///
/// [str]: The URI path of the request.
function path(): String = Path

/// Retrieves the HTTP method of the request.
///
/// [str]: The HTTP method of the request.
function method(): String = Method

/// Retrieves the Client IP of the request.
///
/// [str]: The Client IP of the request.
function IP(): String = IP

/// Retrieves the Request ID of the request.
///
/// [str]: The Request ID of the request.
function ID(): String = ID
