/// Abstractions for Kdeps LLM operations
///
/// This module provides the structure for LLM (Large Language Model) operations within the Kdeps framework,
/// including chat interactions, response handling, and model configuration. It defines classes and functions
/// for managing LLM resources, processing prompts, and handling responses from various LLM models.
///
/// This module is part of the `kdeps` schema and provides a unified interface for LLM operations across
/// different models and providers.
///
/// The module defines:
/// - [ResourceChat]: For managing chat interactions with LLM models.
/// - [MultiChat]: For managing multi-turn chat conversations.
/// - [Tool]: For managing tool interactions with LLM models.
/// - Functions for retrieving and processing LLM responses.
@ModuleInfo { minPklVersion = "0.28.2" }

@go.Package { name = "github.com/kdeps/schema/gen/llm" }

open module org.kdeps.pkl.LLM

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.10.0#/go.pkl"
import "package://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.uri@1.0.3#/URI.pkl"
import "pkl:json"
import "pkl:test"
import "pkl:semver"
import "pkl:shell"
import "pkl:xml"
import "pkl:yaml"

import "Document.pkl" as document
import "Utils.pkl" as utils
import "Memory.pkl" as memory
import "Session.pkl" as session
import "Tool.pkl" as tool
import "Item.pkl" as item
import "Agent.pkl" as agent
import "Core.pkl" as core

/// Helper function to parse JSON safely and return null if parsing fails
function parseJsonOrNull(data: String?) =
  if (data != null && data != "" && data != "null")
    test.catchOrNull(() -> (new json.Parser { useMapping = true }).parse(data))
  else
    null

/// Helper function to safely read from pklres and return null if not available
function safeRead(uri: String?) =
  if (uri != null && uri != "")
    test.catchOrNull(() -> read(uri))
  else
    null

/// Helper function to safely get a value from pklres and return empty string if not available
function safeGetValue(collection: String?, key: String?): String =
  if (collection != null && key != null)
    // URL encode the collection name to handle special characters like @
    let (encodedCollection = collection.replaceAll("@", "%40"))
    let (result = safeRead("pklres://?op=get&collection=" + encodedCollection + "&key=" + key))
    if (result != null)
      let (jsonText = result)
      if (jsonText != "null" && jsonText != "")
        // For simple strings, return as-is. For nested data, it should already be JSON encoded by Go side
        jsonText
      else
        ""
    else
      ""
  else ""


/// Class representing a chat interaction with an LLM model.
class ResourceChat {
    /// The name of the LLM model to use for the chat interaction.
    Model: String? = "llama3.2"

    /// The role or persona for the chat interaction.
    Role: String?

    /// The prompt or message to send to the LLM model.
    Prompt: String?

    /// The response received from the LLM model.
    Response: String?

    /// The file path where the response is stored.
    File: String?

    /// Whether the response should be in JSON format.
    JSONResponse: Boolean? = false

    /// A listing of specific keys to extract from the JSON response.
    JSONResponseKeys: Listing<String>?

    /// The timeout duration for the LLM request.
    TimeoutDuration: Duration? = 60.s

    /// The timestamp when the request was made.
    Timestamp: Duration?

    /// The scenario or context for the chat interaction.
    Scenario: Listing<MultiChat>?

    /// The tools available for the LLM to use.
    Tools: Listing<Tool>?

    /// The files associated with the chat interaction.
    Files: Listing<String>?

    /// A description of the chat interaction.
    Description: String?

    /// The listing of the item iteration results.
    ItemValues: Listing<String>?
}

/// Class representing a multi-turn chat conversation.
class MultiChat {
    /// The role or persona for this turn of the conversation.
    Role: String?

    /// The prompt text to be sent to the LLM model.
    Prompt: String?

    /// The content or message for this turn of the conversation.
    Content: String?

    /// A description of this turn of the conversation.
    Description: String?
}

/// Class representing a tool that can be used by an LLM model.
class Tool {
    /// The name of the tool.
    Name: String?

    /// The script content to execute for the tool.
    Script: String?
    
    /// The MCP server configuration for the tool.
    MCPServer: Uri?

    /// A description of what the tool does.
    Description: String?

    /// A mapping of parameter names to their properties for tool configuration.
    Parameters: Mapping<String, ToolProperties>?
}

/// Class representing a single parameter's properties in a tool definition.
class ToolProperties {
    /// Indicates if the parameter is required for the tool to function.
    Required: Boolean? = true

    /// The data type of the parameter (e.g., "string", "integer").
    Type: String?

    /// A description of the parameter's purpose.
    Description: String?
}

/// Retrieves the [ResourceChat] associated with the given [actionID].
///
/// If the resource is not found, returns a new [ResourceChat] with default values.
///
/// [actionID]: The actionID of the resource to retrieve.
/// [ResourceChat]: The [ResourceChat] object associated with the resource actionID.
function resource(actionID: String?): ResourceChat =
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (model = safeGetValue(resolvedID, "model"))
        let (role = safeGetValue(resolvedID, "role"))
        let (prompt = safeGetValue(resolvedID, "prompt"))
        let (response = safeGetValue(resolvedID, "response"))
        let (file = safeGetValue(resolvedID, "file"))
        let (jsonResponse = safeGetValue(resolvedID, "jsonResponse"))
        let (timeoutDuration = safeGetValue(resolvedID, "timeoutDuration"))
        
        new ResourceChat {
            Model = if (model != "") model else "llama3.2"
            Role = if (role != "") role else null
            Prompt = if (prompt != "") prompt else null
            Response = if (response != "") response else null
            File = if (file != "") file else null
            JSONResponse = if (jsonResponse != "") jsonResponse.toBoolean() else false
            TimeoutDuration = if (timeoutDuration != "") timeoutDuration.toDuration() else 60.s
        }
    else
        // Return default ResourceChat for null actionID
        new ResourceChat {}

/// Retrieves the response text associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the response for.
/// [str]: The response text returned by the LLM model.
function response(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "response"))
        if (res != "") res else ""
    else ""

/// Retrieves the prompt text associated with the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the prompt for.
/// [str]: The prompt text sent to the LLM model.
function prompt(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "prompt"))
        if (res != "") res else ""
    else ""

/// Retrieves whether the LLM's response for the resource [actionID] is in JSON format.
///
/// [actionID]: The actionID of the resource to check for JSON response.
/// [bool]: True if the response is in JSON format, otherwise False.
function jsonResponse(actionID: String?): Boolean = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "jsonResponse"))
        if (res != "")
            res.toBoolean()
        else false
    else false

/// Retrieves the JSON response keys for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the JSON response keys for.
/// [Listing<String>]: A listing of the JSON response keys.
function jsonResponseKeys(actionID: String?): Listing<String> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "jsonResponseKeys"))
        if (res != "")
            let (parsed = parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<String> else new Listing<String> {}
        else new Listing<String> {}
    else new Listing<String> {}

/// Retrieves the item iteration responses for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the item values for.
/// [Listing<String>]: A listing of the item iteration responses.
function itemValues(actionID: String?): Listing<String> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "itemValues"))
        if (res != "")
            let (parsed = parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<String> else new Listing<String> {}
        else new Listing<String> {}
    else new Listing<String> {}

/// Retrieves the model name for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the model for.
/// [str]: The model name.
function model(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "model"))
        if (res != "") res else "llama3.2"
    else "llama3.2"

/// Retrieves the role for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the role for.
/// [str]: The role.
function role(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "role"))
        if (res != "") res else ""
    else ""

/// Retrieves the file path for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the file for.
/// [str]: The file path.
function file(actionID: String?): String = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "file"))
        if (res != "") res else ""
    else ""

/// Retrieves the timeout duration for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timeout for.
/// [Duration]: The timeout duration.
function timeoutDuration(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "timeoutDuration"))
        if (res != "") res.toDuration() else 60.s
    else 60.s

/// Retrieves the timestamp for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the timestamp for.
/// [Duration]: The timestamp.
function timestamp(actionID: String?): Duration = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "timestamp"))
        if (res != "") res.toDuration() else 0.s
    else 0.s

/// Retrieves the scenario for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the scenario for.
/// [Listing<MultiChat>]: The scenario.
function scenario(actionID: String?): Listing<MultiChat> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "scenario"))
        if (res != "")
            let (parsed = parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<MultiChat> else new Listing<MultiChat> {}
        else new Listing<MultiChat> {}
    else new Listing<MultiChat> {}

/// Retrieves the tools for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the tools for.
/// [Listing<Tool>]: The tools.
function tools(actionID: String?): Listing<Tool> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "tools"))
        if (res != "")
            let (parsed = parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<Tool> else new Listing<Tool> {}
        else new Listing<Tool> {}
    else new Listing<Tool> {}

/// Retrieves the files for the resource [actionID].
///
/// [actionID]: The actionID of the resource to retrieve the files for.
/// [Listing<String>]: The files.
function files(actionID: String?): Listing<String> = 
    if (actionID != null)
        let (resolvedID = agent.resolveActionID(actionID))
        let (res = safeGetValue(resolvedID, "files"))
        if (res != "")
            let (parsed = parseJsonOrNull(res))
            if (parsed != null) parsed as Listing<String> else new Listing<String> {}
        else new Listing<String> {}
    else new Listing<String> {}
